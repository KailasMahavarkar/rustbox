name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libseccomp-dev libcap-dev
        
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
          
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose --all-features
      
    - name: Run tests (release mode)
      run: cargo test --release --verbose --all-features

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libseccomp-dev libcap-dev
        
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
      
    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libseccomp-dev libcap-dev
        
    - name: Build release binary
      run: cargo build --release --all-features
      
    - name: Run integration tests
      run: |
        chmod +x tests/core/quick_core_test.sh
        ./tests/core/quick_core_test.sh
        
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: rustbox-binary
        path: target/release/rustbox

  package:
    name: Package for Distribution
    runs-on: ubuntu-latest
    needs: [test, build-release]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libseccomp-dev libcap-dev
        
    - name: Install cargo-deb
      run: cargo install cargo-deb
      
    - name: Build release
      run: cargo build --release --all-features
      
    - name: Create Debian package
      run: cargo deb
      
    - name: Upload Debian package
      uses: actions/upload-artifact@v3
      with:
        name: rustbox-deb
        path: target/debian/*.deb

  fuzz-test:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libseccomp-dev libcap-dev
        
    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz
      
    - name: Initialize fuzz directory
      run: |
        if [ ! -d "fuzz" ]; then
          cargo fuzz init
        fi
        
    - name: Run fuzz tests (short duration for CI)
      run: |
        timeout 300s cargo fuzz run seccomp_filter -- -max_total_time=300 || true
        timeout 300s cargo fuzz run config_parser -- -max_total_time=300 || true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: rustbox:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max